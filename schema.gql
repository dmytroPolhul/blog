# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Blog {
  author: User!
  createdAt: DateTime!
  deletedAt: DateTime!
  description: String!
  id: String!
  posts: [BlogPost!]
  title: String!
  updatedAt: DateTime!
}

input BlogFilter {
  authorId: String
  blogId: String
  includePosts: Boolean
}

type BlogFilterObject {
  authorId: String
  blogId: String
  includePosts: Boolean
}

type BlogOptions {
  filter: BlogFilterObject
  pagination: PaginationObject
  sorting: SortingObject
}

type BlogPost {
  blog: Blog!
  createdAt: DateTime!
  deletedAt: DateTime!
  id: String!
  isPublish: Boolean!
  mainText: String!
  tags: [String!]!
  title: String!
  updatedAt: DateTime!
}

input BlogPostFilter {
  blogPostId: String
  isPublish: Boolean
  tag: String
  title: String
}

type BlogPostFilterObject {
  blogPostId: String
}

input BlogPostFilteringPaginationSorting {
  filter: BlogPostFilter
  pagination: Pagination
  sorting: Sorting
}

type BlogPostOptions {
  filter: BlogPostFilterObject
  pagination: PaginationObject
  sorting: SortingObject
}

type BlogPostsResponse {
  options: BlogPostOptions!
  results: [BlogPost!]!
  total: Int!
}

type BlogsResponse {
  options: BlogOptions!
  results: [Blog!]!
  total: Int!
}

input CreateBlogInput {
  authorId: String!
  description: String!
  title: String!
}

input CreateBlogPostInput {
  blogId: String!
  isPublish: Boolean! = false
  mainText: String!
  tags: [String!]
  title: String!
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  role: Role! = WRITER
  status: Boolean! = false
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input FilteringPaginationSorting {
  filter: BlogFilter
  pagination: Pagination
  sorting: Sorting
}

type Mutation {
  createBlog(createBlogInput: CreateBlogInput!): Blog!
  createBlogPost(createBlogPostInput: CreateBlogPostInput!): BlogPost!
  createUser(createUserInput: CreateUserInput!): User!
  deleteBlog(id: String!): Boolean!
  login(email: String!, password: String!): String!
  logout: Boolean!
  refresh: String!
  removeBlogPost(id: String!): Boolean!
  removeUser(id: String!): User!
  updateBlog(updateBlogInput: UpdateBlogInput!): Blog!
  updateBlogPost(updateBlogPostInput: UpdateBlogPostInput!): BlogPost!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

"""Order direction"""
enum Ordering {
  ASC
  DESC
}

input Pagination {
  limit: Int = 5
  offset: Int = 0
}

type PaginationObject {
  limit: Int
  offset: Int
}

type Query {
  blogPost(id: String!): BlogPost!
  blogPosts(filter: BlogPostFilteringPaginationSorting): BlogPostsResponse!
  blogs(filter: FilteringPaginationSorting): BlogsResponse!
  getBlogById(id: String!): Blog!
  getBlogPosts(id: String!): [Blog!]!
  userById(id: String!): User!
  users: [User!]!
}

"""Users roles"""
enum Role {
  MODERATOR
  WRITER
}

input Sorting {
  field: String = "createdAt"
  order: Ordering = DESC
}

type SortingObject {
  field: String
  order: Ordering
}

input UpdateBlogInput {
  description: String
  id: String!
  title: String
}

input UpdateBlogPostInput {
  id: String!
  isPublish: Boolean = false
  mainText: String
  tags: [String!]
  title: String
}

input UpdateUserInput {
  email: String
  firstName: String
  id: String!
  lastName: String
  newEmail: String
  newPassword: String
  password: String
  role: Role = WRITER
  status: Boolean!
}

type User {
  blogs: [Blog!]
  createdAt: DateTime!
  deletedAt: DateTime!
  email: String!
  firstName: String!
  id: String!
  lastName: String!
  role: Role!
  status: Boolean!
  token: String!
  updatedAt: DateTime!
}